Exercise 2a is at the bottom of Exercise2.java

Exercise 2b:

1. Demonstrate the heap sort algorithm for the following input array of integers:
3, 28, 14, -5, 6, 12, 3
Show the steps of phase 1 graphically, by means of tree structures as illustrated in Figure 2.
Show the steps of phase 2 by means of arrays as depicted in Figure 1. Include the steps in
your Java code as comments.

Phase 1:
				3
			   / \
			 28   14
			/\     /\
		  -5  6  12  3
		  
		  	   28
			  /  \
			 3   14
			/\     /\
		  -5  6  12  3
		  
		  		28
			   / \
			 6   14
			/\     /\
		  -5  3  12  3
		  
Phase 2:
	1. 28, 6, 14, -5, 3, 12, 3
	
		Exchange 28 with 3 at the end, exchange the 3 at the top with 14. Exchange 12 and 3. 28 is sorted.
			
	2. 14, 6, 3, -5, 12, 3 | 28
	
		Exchange 14 with 3 at the end, exchange the 3 at the top with 12. 14 is sorted.
		
	3. 12, 6, 3, -5, 3 | 14, 28
	
		Exchange 12 with 3 at the end, exchange the 3 at the top with 6. 12 is sorted.
		
	4. 6, 3, 3, -5 | 12, 14, 28
	
		Exchange 6 with -5 at the end, exchange -5 with either 3 (I choose 3 at the end). 6 is sorted.
		
	5. 3, 3, -5 | 6, 12, 14, 28
	
		Exchange 3 with -5 at the end. Exchange -5 at the top with 3. 3 is sorted.
		
	6. 3, -5 | 3, 6, 12, 14, 28
	
		Exchange 3 with -5. 3 is sorted.
		
	7. -5 | 3, 3, 6, 12, 14, 28
	
		-5 is last number, so sorted.
		
	8. -5, 3, 3, 6, 12, 14, 28
		
		
2. What is the order of run-time complexity of the algorithms pushUp, buildHeap, pushDown,
pickHeap, and so, of heap sort, for an array of N elements? Motivate your answer.

n = number of elements in array(list)

pushUp
- number of comparisons/swaps 	= (depth in tree - 1) * swap with parent
								= (2log(n) - 1) * swap
								= O(log(n)) * O(1)
								= O(log(n))

buildHeap
- n * pushUp = O(n) * O(log(n)) = O(n log(n))

pushDown
- swap(pos 0 with pos n-1) + compare immediate children * (tree depth - 1)
  = O(1) + swap * (2log(n) - 1)
  = O(1) + O(1) * O(log (n))
  = O(log (n))

pickHeap
- n * pushDown
  = n * O(log (n))
  = O(n log(n))